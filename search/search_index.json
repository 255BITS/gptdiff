{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Transform Your Codebase with AI <p>Semantic code modifications through natural language</p> <pre><code>gptdiff \"Add type hints to functions\" --apply\n\u2705 Successfully applied patch</code></pre> <pre><code>gptdiff \"Add API documentation\" --call\n\ud83d\udd27 Patch written to diff.patch</code></pre> <pre><code>gptdiff \"Improve error messages\"\n\ud83d\udcc4 LLM not called, written to prompt.txt</code></pre> \ud83d\ude80 Make impactful changes with one command <ul> <li><code>--apply</code> AI-powered patch recovery</li> <li><code>--nobeep</code> Disable completion notifications</li> <li><code>--temperature</code> Control creativity (0-2)</li> <li><code>--model</code> Switch between LLM providers</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li> \ud83d\udd25 Multi-File Changes - Update related files together in one step   </li> <li> \ud83d\udee0 Auto-Fix Conflicts     Fixes conflicting changes using AI understanding of your code's purpose   </li> <li> \u26a1 Simple Commands <ul> <li>Change specific files</li> <li>See progress updates</li> <li>Clear cost tracking</li> </ul> </li> </ul>"},{"location":"#how-to-develop-with-gptdiff","title":"How to develop with gptdiff","text":"\ud83d\ude80 The new dev cycle <ol> <li> Generate Changes <pre><code>gptdiff \"Add type safety\" --apply</code></pre> </li> <li> Review Modifications <pre><code>git add -p</code></pre> </li> <li> Finalize Changes <pre><code>git commit -m 'AI improvements'</code></pre> </li> <li> Stash Uncommitted Changes <pre><code>git stash</code></pre> </li> </ol>"},{"location":"#getting-started","title":"Getting Started","text":"<p>For a step-by-step guide on how to install and configure <code>gptdiff</code>, check out the Installation Guide.</p> <pre><code>\n$ pip install gptdiff\n</code></pre> \ud83d\udd27 Built with AI Agent Toolbox"},{"location":"api/","title":"GPTDiff API Reference","text":""},{"location":"api/#core-functions","title":"Core Functions","text":""},{"location":"api/#generate_diff","title":"generate_diff","text":"<pre><code>def generate_diff(\n    environment: str,\n    goal: str,\n    model: str = os.getenv('GPTDIFF_MODEL', 'deepseek-reasoner'),\n    temperature: float = 0.7,\n    max_tokens: int = 32000,\n    prepend: Optional[str] = None,  # Path to prepend content file\n    api_key: Optional[str] = None,  # Can also set via GPTDIFF_LLM_API_KEY env\n    base_url: Optional[str] = None\n) -&gt; str\n</code></pre> <p>Note: Built with the AI Agent Toolbox for reliable tool parsing across models and frameworks</p> <p>Transforms environments through natural language instructions</p> <ul> <li><code>environment</code>: Multi-file codebase representation using <code>File: [path]</code> headers</li> <li><code>goal</code>: Natural language instruction for desired code changes</li> <li>Returns unified diff string sometimes compatible with smartapply</li> </ul> <p>Example:</p> <pre><code>from gptdiff import generate_diff, build_environment  # Uses AI Agent Toolbox for reliable parsing\n\n# Multi-file environment example\nfiles = {\n    \"main.py\": \"def greet():\\n    print('Hello World')\",\n    \"tests/test_main.py\": \"def test_greet():\\n    pass\" \n}\nenv = build_environment(files)\n\n# Coordinated change across implementation and tests\ndiff = generate_diff(env, \n    \"Add return type hints and update tests to match\"\n)\n\nfiles = {\"main.py\": \"def greet():\\n    print('Hello World')\"}\nenv = build_environment(files)\ndiff = generate_diff(env, \"Translate greeting to Spanish\")\n</code></pre> <p>Pro Tip: Use <code>build_environment()</code> with file dictionaries for safer environment creation</p>"},{"location":"api/#smartapply","title":"smartapply","text":"<pre><code>def smartapply(  # AI-powered patch resolver\n    diff_text: str,\n    files: Dict[str, str],\n    model: str = 'deepseek-reasoner',\n    api_key: Optional[str] = None,\n    base_url: Optional[str] = None\n) -&gt; Dict[str, str]\n</code></pre> <p>Applies diffs with AI-powered conflict resolution - Safe: Preserves file encoding and line endings - Robust: Handles ambiguous hunks through context-aware reconciliation - Uses LLM to preserve context around changes - Handles new file creation and complex patches</p> <ul> <li><code>diff_text</code>: Unified diff generated by <code>generate_diff</code></li> <li><code>files</code>: Dictionary of {file_path: content} to modify</li> <li>Returns updated file dictionary with changes applied</li> </ul> <p>Implementation Notes: - Uses per-file processing with concurrent execution - Maintains original file encodings and line endings - Handles ambiguous hunks through LLM-powered reconciliation</p> <p>Basic Example:</p> <pre><code>original_files = {\"main.py\": \"def greet():\\n    print('Hello World')\"}\nupdated_files = smartapply(diff, original_files)  # Returns new dict\n</code></pre> <p>Advanced Example (Multi-file Modification):</p> <pre><code>original_files = {\n    \"file1.py\": \"def func1():\\n    print('Old func1')\",\n    \"file2.py\": \"def func2():\\n    print('Old func2')\",\n    \"unrelated.py\": \"def unrelated():\\n    pass\"\n}\n\ndiff = '''diff --git a/file1.py b/file1.py\n--- a/file1.py\n+++ b/file1.py\n@@ -1,2 +1,2 @@\n def func1():\n-    print(\"Old func1\")\n+    print(\"New func1\")\ndiff --git a/file2.py b/file2.py\n--- a/file2.py\n+++ b/file2.py\n@@ -1,2 +1,2 @@\n def func2():\n-    print(\"Old func2\")\n+    print(\"New func2\")'''\n\nupdated_files = smartapply(diff, original_files)\n\nprint(updated_files[\"file1.py\"])  # Contains 'print(\"New func1\")'\nprint(updated_files[\"file2.py\"])  # Contains 'print(\"New func2\")'\nprint(updated_files[\"unrelated.py\"])  # Remains unchanged\n</code></pre> <p>Real-World Refactor Example:</p> <pre><code># Coordinated database schema and ORM update\noriginal_files = {\n    \"models.py\": \"class User:\\n    name = CharField()\",\n    \"migrations/0001_initial.py\": \"# Existing migration\",\n    \"tests/test_models.py\": \"def test_user_creation():\\n    User(name='Test').save()\"\n}\n\ndiff = generate_diff(\n    build_environment(original_files),\n    \"Rename 'name' field to 'username' across all layers\"\n)\n\nupdated_files = smartapply(diff, original_files)\n</code></pre> <p>Conflict Resolution &amp; Error Handling:</p> <pre><code>from openai import APIError\nfrom gptdiff import parse_environment\n\ndiff = '''diff --git a/core.py b/core.py\n@@ -10,3 +10,3 @@\n+-def old_name():  # Existing line being removed\n++def new_name():'''\n\ntry:\n    smartapply(diff, {\"core.py\": \"def old_name():\\n    pass\"}) \nexcept APIError as e:  # Built-in error handling\n    updated = smartapply(diff, files, model='gemini-2.0-flash')  # Retry\n</code></pre>"},{"location":"api/#authentication-configuration","title":"Authentication &amp; Configuration","text":"<pre><code># Option 1: Environment variables\nimport os  # Recommended for CLI usage\nos.environ['GPTDIFF_LLM_API_KEY'] = 'key_123'\nos.environ['GPTDIFF_LLM_BASE_URL'] = 'https://api.example.com/v1'\n\n# Option 2: Direct parameters  # Preferred for library use\n# Direct parameters override environment variables\n\ngenerate_diff(\n    environment=env,\n    goal=instruction,\n    api_key='key_123',\n    base_url='https://api.example.com/v1'\n)\n</code></pre>"},{"location":"api/#error-handling-recovery","title":"Error Handling &amp; Recovery","text":"<pre><code>from openai import APIError, AuthenticationError\n\ntry:\n    diff = generate_diff(environment, \"Modernize error handling\")\n    updated = smartapply(diff, files)\nexcept AuthenticationError as e:\n    print(f\"Invalid credentials: {e.user_message}\")\nexcept APIError as e:\n    print(f\"API failure: {e.message}\")\n    if e.status_code == 429:\n        print(\"Rate limit exceeded - add delay\")\nexcept Exception as e:\n    print(f\"Unexpected error: {str(e)}\")\n</code></pre>"},{"location":"api/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Environment Formatting:    <code>python    from gptdiff import build_environment    env = build_environment(files_dict)  # Safely handles edge cases</code></p> </li> <li> <p>Model Selection:</p> </li> <li><code>deepseek-reasoner</code>: Structural code changes (default)</li> <li><code>gemini-2.0-flash</code>: Faster responses for simple text modifications</li> </ol>"},{"location":"api/#edge-case-handling","title":"Edge Case Handling","text":"<p>New File Creation:</p> <pre><code># smartapply automatically creates missing files\ndiff = '''diff --git a/new.py b/new.py\n@@ -0,0 +1,2 @@\n+def initialize():\n+    print(\"New module\")'''  # Correct diff syntax\n\nassert 'new.py' in smartapply(diff, {})\n</code></pre> <p>Modified File Validation:</p> <pre><code># Maintains surrounding context during patching\noriginal = {\"utils.py\": \"def calc():\\n    return 42\"}\ndiff = '''diff --git a/utils.py b/utils.py\n@@ -1,2 +1,2 @@\n+-def calc():\n++def calculate():\n+     return 42'''\n\nupdated = smartapply(diff, original)\nassert \"calculate()\" in updated[\"utils.py\"]\n</code></pre> <p>File Deletion Handling:</p> <pre><code>diff = '''diff --git a/old.py b/old.py\ndeleted file mode 100644\n--- a/old.py\n++++ /dev/null\n@@ -1,3 +0,0 @@\n+-def deprecated():\n+-    print(\"Remove me\")'''\n\n# smartapply will remove file from returned dictionary\noriginal = {\"old.py\": \"def deprecated():\\n    print('Remove me')\"}\nupdated = smartapply(diff, original)\nassert \"old.py\" not in updated\n\n# Verify unrelated files preserved\nassert all(f not in updated for f in [\"utils.py\", \"config.ini\"])\n</code></pre> <p>Note: Deleted files are omitted from the returned dictionary</p> <p>Edge Case Handling: - New files are created with proper directory structure - Binary files are automatically skipped</p>"},{"location":"api/#advanced-use-cases","title":"Advanced Use Cases","text":"<p>Coordinated Multi-File Refactor:</p> <pre><code>original_files = {\n    \"api.py\": \"def old_name(): pass\",\n    \"test_api.py\": \"def test_old_name(): pass\"\n}\n\ndiff = generate_diff(build_environment(original_files), \"Rename old_name to new_name everywhere\")\nupdated_files = smartapply(diff, original_files)\n</code></pre> <p>Batch Processing Pipeline:</p> <pre><code>from gptdiff import parse_environment, build_environment\n\n# Process multiple transformations sequentially\nfiles = load_project_files()  # Your custom loader\nenv = build_environment(files)\n\nfor task in [\"Add type hints\", \"Convert to f-strings\"]:\n    diff = generate_diff(env, task)\n    files = smartapply(diff, files)\n    env = build_environment(files)  # Refresh environment\n\nsave_files(files)  # Your custom saver\n</code></pre>"},{"location":"cli/","title":"GPTDiff CLI Reference","text":""},{"location":"cli/#core-command-structure","title":"Core Command Structure","text":"<pre><code>gptdiff \"&lt;transformation-prompt&gt;\" [FILES...] [OPTIONS]\n</code></pre>"},{"location":"cli/#key-options","title":"Key Options","text":""},{"location":"cli/#gitignore-and-gptignore","title":".gitignore and .gptignore","text":"<p>Files matching .gitignore pattern or .gptignore patterns are ignored when no files are specified.</p>"},{"location":"cli/#transformation-control","title":"Transformation Control","text":"<p><code>--apply</code> AI-powered patch application Example: \u26a0\ufe0f Processes files concurrently for performance</p> <pre><code>gptdiff \"Add null safety checks\" --apply src/\n</code></pre> <p><code>--call</code> Generate diff without applying Example: </p> <pre><code>gptdiff \"Modernize string formatting\" --call\n</code></pre> <p><code>--prepend &lt;file&gt;</code> Prepend custom instructions from file to system prompt Example:</p> <pre><code>gptdiff \"Modernize string formatting\" --prepend style-guide.txt\n</code></pre> <p><code>--temperature &lt;0-2&gt;</code> Control transformation creativity Default: 0.7 Example: </p> <pre><code>gptdiff \"Refactor legacy API\" --temperature 0.3\n</code></pre>"},{"location":"cli/#model-selection","title":"Model Selection","text":"<p><code>--model</code> Choose reasoning engine (default: $GPTDIFF_MODEL or 'deepseek-reasoner') Options: <code>deepseek-reasoner</code> (structural), <code>gemini-2.0-flash</code> (text) Example: </p> <pre><code>gptdiff \"Translate docs to French\" --model gemini-2.0-flash\n</code></pre>"},{"location":"cli/#scope-management","title":"Scope Management","text":"<p><code>--files</code> Target specific paths Example: </p> <pre><code>gptdiff \"Update config system\" config/ utils/config_loader.py\n</code></pre> <p><code>--nobeep</code> Silence completion alerts Example: </p> <pre><code>gptdiff \"Remove deprecated features\" --nobeep\n</code></pre>"},{"location":"concepts/","title":"Core Concepts","text":""},{"location":"concepts/#minimalist-architecture","title":"Minimalist Architecture","text":"<pre><code>graph TD\n    A[Natural Language Prompt] --&gt; B(Call LLM to get diff)\n    B --&gt; D[Generate Unified Diff]\n    D --&gt; E[SmartApply Resolution]\n    E --&gt; F[Updated Codebase]\n</code></pre>"},{"location":"concepts/#key-principles","title":"Key Principles:","text":"<ol> <li>Radical Simplicity - Single-purpose components with clean interfaces</li> <li>Context Preservation - Maintain surrounding code integrity during patches</li> </ol>"},{"location":"concepts/#smartapply-mechanics","title":"SmartApply Mechanics","text":"<pre><code>def smartapply(diff, files):\n    for file in parse_diff(diff):\n        if file_deletion:\n            remove_file(file)\n        else:\n            original = files.get(file, '')\n            # AI-powered conflict resolution, done in parallel\n            updated = llm_reconcile(original, file_diff)  \n            files[file] = updated\n    return files\n</code></pre>"},{"location":"concepts/#failure-recovery-flow","title":"Failure Recovery Flow:","text":"<ol> <li>Attempt standard <code>git apply</code></li> <li>Uses native git patching first for speed</li> <li>If conflicts detected:</li> <li>Split diff into per-file patches</li> <li>Process each file independently with LLM context</li> <li>Preserve non-conflicting sections</li> <li>Rebuild file from reconciled fragments</li> </ol>"},{"location":"concepts/#safety-mechanisms","title":"Safety Mechanisms","text":"<ul> <li>Dry-Run Validation - Preview changes before application</li> <li>Atomic Operations - Each file processed independently</li> <li>Context-Aware Patching - LLM understands code semantics during conflict resolution</li> <li>Strict Idempotence - Reapplying same diff produces identical result</li> </ul>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.8 or higher</li> </ul>"},{"location":"installation/#install-via-pip","title":"Install via pip","text":"<p>To install <code>gptdiff</code> from PyPI, run the following command:</p> <pre><code>pip install gptdiff\npip install tiktoken  # For token counting\n</code></pre>"},{"location":"installation/#development-installation-if-no-pip-package-is-available-yet","title":"Development Installation (if no pip package is available yet)","text":"<p>If the <code>gptdiff</code> package is not yet available on PyPI, you can install it from the source code:</p> <pre><code>git clone https://github.com/255BITS/gptdiff.git\ncd gptdiff\npython setup.py install\n</code></pre>"},{"location":"installation/#configuration","title":"Configuration","text":""},{"location":"installation/#api-key-and-base-url","title":"API Key and Base URL","text":"<p>To use <code>gptdiff</code>, you need an API key from nano-gpt.com/api. Once you get your API key, you need to set up the following environment variables.</p>"},{"location":"installation/#linuxmacos","title":"Linux/MacOS","text":"<pre><code>export GPTDIFF_LLM_API_KEY='your-api-key'\n# Optional: For switching API providers\nexport GPTDIFF_MODEL='deepseek-reasoner'  # Default model\nexport GPTDIFF_LLM_BASE_URL='https://nano-gpt.com/api/v1/'\n</code></pre>"},{"location":"installation/#windows","title":"Windows","text":"<pre><code>set GPTDIFF_LLM_API_KEY=your-api-key\nrem Optional: For switching API providers\nset GPTDIFF_LLM_BASE_URL=https://nano-gpt.com/api/v1/\n</code></pre> <p>The default base URL points to <code>nano-gpt.com</code>'s API. Supported models can be specified with:</p> <pre><code>gptdiff 'your prompt' --model $GPTDIFF_MODEL\n</code></pre>"},{"location":"quickstart/","title":"Quickstart Guide","text":""},{"location":"quickstart/#installation","title":"Installation","text":"<pre><code>pip install gptdiff\n</code></pre>"},{"location":"quickstart/#configuration","title":"Configuration","text":"<p>Set your API key:</p> <pre><code>export GPTDIFF_LLM_API_KEY='your-api-key'\n</code></pre>"},{"location":"quickstart/#your-first-transformation","title":"Your First Transformation","text":"<ol> <li> <p>Navigate to your project:    <code>bash    cd myproject    cat \"# A collection of useful linux commands: ...\"</code></p> </li> <li> <p>Generate and smartapply a diff:    <code>bash    gptdiff \"Add some useful linux commands\" --apply</code></p> </li> <li> <p>Apply:    <code>bash    git add -p    git commit</code></p> </li> </ol>"},{"location":"quickstart/#next-steps","title":"Next Steps","text":"<ul> <li>Explore common recipes for typical use cases</li> <li>Learn advanced patterns in the Automation Guide</li> <li>Dive into the API Reference for programmatic usage</li> </ul>"},{"location":"troubleshooting/","title":"Troubleshooting","text":""},{"location":"troubleshooting/#common-issues-and-solutions","title":"Common Issues and Solutions","text":""},{"location":"troubleshooting/#issue-1-api-key-not-found","title":"Issue 1: API Key Not Found","text":"<p>Description: You receive an error message indicating that the GPTDIFF_LLM_API_KEY environment variable is required.</p> <p>Solution: - Ensure that you have set the GPTDIFF_LLM_API_KEY environment variable correctly. For Linux/MacOS, you can set it using:     <code>bash     export GPTDIFF_LLM_API_KEY='your-api-key'</code> - For Windows, use:     <code>cmd     set GPTDIFF_LLM_API_KEY=your-api-key</code> - Verify that the API key is correctly set by running <code>echo $GPTDIFF_LLM_API_KEY</code> on Linux/MacOS or <code>echo %GPTDIFF_LLM_API_KEY%</code> on Windows.</p>"},{"location":"troubleshooting/#issue-2-unable-to-apply-generated-diff","title":"Issue 2: Unable to Apply Generated Diff","text":"<p>Description: The <code>gptdiff</code> command generates a diff, but applying the patch using <code>git apply</code> fails.</p> <p>Solution: 1. First, make sure that the generated diff is valid by saving it to a file and checking it manually:     <code>bash     gptdiff \"your prompt\" --call &gt; diff.patch     git apply --check diff.patch</code> 2. If <code>git apply</code> fails, try using the <code>smartapply</code> feature:     <code>bash     gptdiff \"your prompt\" --apply</code>     This uses an AI-powered conflict resolution to handle issues with applying the diff.</p>"},{"location":"troubleshooting/#issue-3-gptdiff-ignores-a-file","title":"Issue 3: GPTDiff Ignores a File","text":"<p>Description: A file that you want to be processed by <code>gptdiff</code> is being ignored.</p> <p>Solution: 1. Ensure that the file is not listed in your <code>.gitignore</code> or <code>.gptignore</code> file. Files listed in these ignore files are excluded from being processed by <code>gptdiff</code>. 2. If you need to include an ignored file, manually specify it in the <code>gptdiff</code> command:     <code>bash     gptdiff \"your prompt\" yourfile.py</code></p>"},{"location":"troubleshooting/#issue-4-large-token-usage-warning","title":"Issue 4: Large Token Usage Warning","text":"<p>Description: When running <code>gptdiff</code>, you get a warning that the request is large and a confirmation prompt appears.</p> <p>Solution: 1. If you are sure that you want to send a large request, type <code>y</code> when prompted. 2. To bypass this warning in the future, you can add the <code>--nowarn</code> flag to your command:     <code>bash     gptdiff \"your prompt\" --apply --nowarn</code></p>"},{"location":"troubleshooting/#issue-5-patch-does-not-produce-expected-changes","title":"Issue 5: Patch Does Not Produce Expected Changes","text":"<p>Description: The changes made by the generated patch do not match what you expected from your prompt.</p> <p>Solution: 1. Review your prompt for clarity and make sure it unambiguously describes the changes you want. 2. Use the <code>--call</code> option first to preview the generated diff without applying it:     <code>bash     gptdiff \"your prompt\" --call</code> 3. If the generated diff is still not as expected, try refining your prompt or using a lower <code>--temperature</code> value for a more deterministic output:     <code>bash     gptdiff \"your prompt\" --temperature 0.3 --call</code></p>"},{"location":"troubleshooting/#issue-6-unicodedecodeerror-when-reading-files","title":"Issue 6: UnicodeDecodeError When Reading Files","text":"<p>Description: You encounter <code>UnicodeDecodeError</code> while reading some files.</p> <p>Solution: 1. <code>gptdiff</code> currently supports only text files encoded in UTF-8. Make sure that all files you want to process are UTF-8 encoded. 2. Binary files are skipped automatically. To handle non-UTF-8 text files, you need to convert them to UTF-8 before processing.</p>"},{"location":"troubleshooting/#issue-7-model-not-responding-as-expected","title":"Issue 7: Model Not Responding as Expected","text":"<p>Description: The model seems to be generating incorrect or irrelevant diffs.</p> <p>Solution: 1. Check that you're using the appropriate model for your task. The default model can be changed by setting the <code>GPTDIFF_MODEL</code> environment variable. 2. Try adjusting the <code>--temperature</code> parameter for more deterministic output:     <code>bash     gptdiff \"your prompt\" --temperature 0.3</code> 3. Ensure your API key has access to the specified model.</p>"},{"location":"concepts/architecture/","title":"System Architecture","text":""},{"location":"concepts/architecture/#core-components","title":"Core Components","text":""},{"location":"concepts/architecture/#key-architectural-decisions","title":"Key Architectural Decisions:","text":"<ol> <li>Clear command line usage - Easily fit into workflows and agents as a command line program</li> <li>Contextual Safety - File isolation during patching</li> <li>Pluggable LLMs - Model-agnostic through AI Agent Toolbox</li> <li>Easy API - A simple API to use in agent loops</li> </ol>"},{"location":"concepts/architecture/#1-prompt-engine","title":"1. Prompt Engine","text":"<p>Integrates with AI Agent Toolbox for reliable parsing</p> <pre><code># Uses Toolbox for structured output\ntoolbox = create_toolbox()\ntoolbox.add_tool(\"diff\", diff_handler)\n</code></pre>"},{"location":"concepts/architecture/#2-diff-generator","title":"2. Diff Generator","text":"<ul> <li>Whole-codebase awareness by default</li> <li>Context-aware change proposals</li> <li>Git-compatible output format</li> </ul> <p>Generation Process: 1. Environment snapshot creation 2. LLM makes diff of environment 3. Diff is applied 4. Validation is run</p>"},{"location":"concepts/architecture/#3-smartapply-system","title":"3. SmartApply System","text":"<pre><code>graph LR\n    A[Raw Diff] --&gt; B(Per-File Split)\n    B --&gt; C{File Exists?}\n    C --&gt;|Yes| D[Patch Application]\n    C --&gt;|No| E[New File Creation]\n    D --&gt; F{Apply Success?}\n    F --&gt;|Yes| G[Commit Change]\n    F --&gt;|No| H[LLM Reconciliation]\n    H --&gt; I[Contextual Merge]\n    I --&gt; G\n</code></pre> <p>Conflict Resolution Logic: - Preserves surrounding code context - Maintains line ending/encoding consistency - Atomic file operations</p>"},{"location":"concepts/architecture/#ai-agent-toolbox-integration","title":"AI Agent Toolbox Integration","text":"<p>Key Components: - <code>FlatXMLParser</code>: Ensures structured diff output - <code>Toolbox</code>: Manages diff generation and validation</p>"},{"location":"concepts/architecture/#key-integration-points","title":"Key Integration Points","text":"<ol> <li>Structured Output Parsing <code>python    parser = FlatXMLParser(\"diff\")    formatter = FlatXMLPromptFormatter(tag=\"diff\")</code></li> <li>Tool Definition <code>python    toolbox.add_tool(name=\"diff\", fn=diff_handler, ...)</code></li> <li>Error-Resistant Parsing - Handles malformed LLM responses</li> </ol>"},{"location":"development/contributing/","title":"Contributing to GPTDiff","text":""},{"location":"development/contributing/#development-philosophy","title":"Development Philosophy","text":"<p>Core Principles: 1. Changes should be utility driven 2. Command line and API usage resist change 3. Test where possible</p>"},{"location":"development/contributing/#development-setup","title":"Development Setup","text":"<ol> <li> <p>Clone Repository:    <code>bash    git clone https://github.com/255BITS/gptdiff.git    cd gptdiff</code></p> </li> <li> <p>Install Dependencies:    <code>bash    pip install -e .[test]</code></p> </li> <li> <p>Run Test Suite:    <code>bash    pytest tests/ --cov=gptdiff --cov-report=term-missing</code></p> </li> </ol>"},{"location":"development/contributing/#contribution-workflow","title":"Contribution Workflow","text":"<ol> <li>Create Feature Branch:    <code>bash    git checkout -b feat/new-feature</code></li> <li>Add Tests:</li> <li>Update Documentation:</li> <li>Keep API reference current</li> <li>Add examples for new features</li> <li>Submit Pull Request:</li> <li>Reference related issues</li> <li>Include test coverage report</li> <li>Document breaking changes</li> </ol>"},{"location":"development/contributing/#code-standards","title":"Code Standards","text":"<ul> <li>Try to get the LLMs to bootstrap the change.</li> <li>Don't hyperfocus on what the LLMs will soon be able to do.</li> </ul>"},{"location":"development/testing/","title":"Testing Philosophy &amp; Practices","text":""},{"location":"development/testing/#core-testing-principles","title":"Core Testing Principles","text":""},{"location":"development/testing/#attributes-of-a-good-test","title":"Attributes of a good test","text":"<ul> <li>Zero cross-test contamination</li> <li>Pure functions with no side effects</li> <li>Deterministic results across runs</li> </ul>"},{"location":"development/testing/#key-test-categories","title":"Key Test Categories","text":""},{"location":"development/testing/#file-operations","title":"File Operations","text":"<pre><code># tests/test_smartapply.py\ndef test_smartapply_file_deletion():\n    \"\"\"Verify clean removal without residual artifacts\"\"\"\n    # Tests deletion idempotency and missing file safety\n\ndef test_smartapply_new_file_creation():\n    \"\"\"Validate file initialization from diffs\"\"\"\n    # Ensures proper handling of /dev/null sources\n</code></pre>"},{"location":"development/testing/#complex-modifications","title":"Complex Modifications","text":"<pre><code>def test_smartapply_complex_single_hunk(mocker):\n    \"\"\"Test multi-line changes with context preservation\"\"\"\n    # Validates LLM mock integration and structural understanding\n\n**Example Mock Setup:**\n```python\n# Mock LLM response for predictable testing\nmocker.patch('gptdiff.gptdiff.call_llm_for_apply',\n    return_value=\"def new():\\n    print('Updated')\")\n\n# Verify transformation\nupdated = smartapply(diff, original_files)\nassert \"Updated\" in updated[\"file.py\"]\n</code></pre>"},{"location":"development/testing/#running-the-test-suite","title":"Running the Test Suite","text":"<pre><code># Install development dependencies\npip install -e .[test]\n\n# Run all tests with coverage\npytest tests/ --cov=gptdiff --cov-report=term-missing\n\n# Target specific test cases\npytest tests/test_smartapply.py -k \"test_smartapply_file_modification\"\n</code></pre>"},{"location":"development/testing/#writing-new-tests","title":"Writing New Tests","text":"<ol> <li>Isolate Scenarios: One logical case per test</li> <li>Mock LLM Responses: Use <code>@patch</code> for deterministic outcomes</li> <li>Check Boundaries: Empty files, invalid paths, encoding issues</li> </ol>"},{"location":"examples/advanced/","title":"Advanced Examples","text":""},{"location":"examples/advanced/#database-layer-migration","title":"Database Layer Migration","text":"<pre><code>gptdiff \"Replace raw SQL with SQLAlchemy ORM\" \\\n    models/ queries/ \\\n    --apply\n</code></pre>"},{"location":"examples/advanced/#api-versioning","title":"API Versioning","text":"<pre><code>gptdiff \"Add v2 API endpoints with backward compatibility\" \\\n    --model deepseek-reasoner \\\n    --temperature 0.5 \\\n    --apply\n</code></pre> <p>Created Files: - <code>api/v2/schemas.py</code> - <code>api/v2/routers/</code> - <code>tests/v2/</code></p>"},{"location":"examples/advanced/#internationalization","title":"Internationalization","text":"<pre><code>gptdiff \"Extract all UI strings to translation files\" \\\n    --files templates/ static/js/ \\\n    --call\n</code></pre> <p>Saved in patch.diff</p>"},{"location":"examples/automation/","title":"Continuous Improvement Automation","text":""},{"location":"examples/automation/#ai-powered-feedback-loops","title":"AI-Powered Feedback Loops","text":""},{"location":"examples/automation/#note-that-agent-loops-dont-work-very-well-yet","title":"Note that agent loops don't work very well yet","text":"<pre><code>graph LR\n    A[Codebase] --&gt; B(GPTDiff Analysis)\n    B --&gt; C{Identify Improvement}\n    C --&gt; D[Generate Patch]\n    D --&gt; E[Apply Changes]\n    E --&gt; F[Verify]\n    F --&gt; A\n</code></pre>"},{"location":"examples/automation/#core-while-loop-pattern","title":"Core While Loop Pattern","text":"<pre><code>while true; do\n  gptdiff \"&lt;improvement-prompt&gt;\" --apply\ndone\n</code></pre>"},{"location":"examples/automation/#test-enhancement-recipes","title":"Test Enhancement Recipes","text":""},{"location":"examples/automation/#missing-test-case-detection","title":"Missing Test Case Detection","text":"<pre><code># Continuously analyze test coverage gaps\nwhile :\ndo\n  gptdiff \"Identify and add missing test cases for edge conditions\" \\\n    --files tests/ \\\n    --apply \\\n    --temperature 0.3\ndone\n</code></pre>"},{"location":"examples/automation/#improvements-per-cycle","title":"Improvements Per Cycle:","text":"<ol> <li>Null input handling tests</li> <li>Boundary value validations</li> <li>Error state simulations</li> <li>Concurrent execution checks</li> </ol>"},{"location":"examples/automation/#flaky-test-remediation","title":"Flaky Test Remediation","text":"<pre><code>while true; do\n  gptdiff \"Find and fix intermittent test failures by adding retries/cleanup\" \\\n    --model deepseek-reasoner \\\n    --apply\ndone\n</code></pre>"},{"location":"examples/automation/#code-quality-automation","title":"Code Quality Automation","text":""},{"location":"examples/automation/#tech-debt-reduction-loop","title":"Tech Debt Reduction Loop","text":"<pre><code>while true\ndo\n  # Prioritize worst code first\n  gptdiff \"Refactor functions with high complexity scores\" \\\n    --apply \\\n    --temperature 0.1\ndone\n</code></pre>"},{"location":"examples/automation/#security-hardening-daemon","title":"Security Hardening Daemon","text":"<pre><code>while :; do\n  gptdiff \"Find and fix OWASP Top 10 vulnerabilities\" \\\n    --files src/ \\\n    --apply \\\n    --model deepseek-reasoner\ndone\n</code></pre>"},{"location":"examples/automation/#documentation-syncing","title":"Documentation Syncing","text":""},{"location":"examples/automation/#code-docs-alignment","title":"Code-Docs Alignment","text":"<pre><code>while true;\ndo\n  gptdiff \"Update documentation to match current implementation\" \\\n    --files src/ docs/ \\\n    --apply \\\n    --temperature 0.5\ndone\n</code></pre>"},{"location":"examples/automation/#performance-optimization","title":"Performance Optimization","text":"<pre><code>while true; do\n  gptdiff \"Identify and optimize slow database queries\" --apply\ndone\n</code></pre>"},{"location":"examples/basic/","title":"Basic Examples","text":""},{"location":"examples/basic/#single-file-refactor","title":"Single-File Refactor","text":"<pre><code># Before: utils.py\ndef process_data(input):\n    result = []\n    for item in input:\n        result.append(item*2)\n    return result\n\ngptdiff \"Convert loop to list comprehension\" utils.py --apply\n</code></pre> <pre><code># After: utils.py\ndef process_data(input):\n    return [item*2 for item in input]\n</code></pre>"},{"location":"examples/basic/#multi-file-rename","title":"Multi-File Rename","text":"<pre><code>gptdiff \"Rename UserController to AccountController\" \\\n    app/controllers/user_controller.py \\\n    test/controllers/test_user_controller.py \\\n    docs/api.md --apply\n</code></pre>"},{"location":"examples/basic/#full-stack-type-safety","title":"Full-Stack Type Safety","text":"<pre><code>gptdiff \"Add Python type hints throughout codebase\" \\\n    --model deepseek-reasoner \\\n    --temperature 0.3 \\\n    --apply\n</code></pre>"},{"location":"examples/basic/#legacy-modernization","title":"Legacy Modernization","text":"<pre><code>gptdiff \"Convert string formatting to f-strings\" src/ --apply\n</code></pre>"}]}